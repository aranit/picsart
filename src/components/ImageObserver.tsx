import React, { useEffect, useRef, useState } from 'react'// ImageObserver component uses the Intersection Observer API to detect when// its children come into the viewport and only then renders them.const ImageObserver = ({ children }: { children: React.ReactNode }) => {	const ref = useRef<HTMLDivElement | null>(null)	const [isVisible, setIsVisible] = useState(false)	useEffect(() => {		const node = ref.current		if (!node) return		// Create a new Intersection Observer		const observer = new IntersectionObserver(			([entry]) => {				// If the element is at least partially in the viewport				if (entry.isIntersecting) {					setIsVisible(true)					// Stop observing after it's visible					observer.disconnect()				}			},			{				// Callback triggers when at least 10% of the element is visible				threshold: 0.1			}		)		// Start observing the DOM node		observer.observe(node)		// Cleanup observer on component unmount		return () => observer.disconnect()	}, [])	// Render children only when the component becomes visible	return <div ref={ref}>{isVisible ? children : null}</div>}export default ImageObserver