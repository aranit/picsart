import { Component, ErrorInfo } from 'react'import { ErrorProps, ErrorState } from '../types/errorBoundary'// Create a class component for the error boundaryclass ErrorBoundary extends Component<ErrorProps, ErrorState> {	// Initialize state without constructor	state: ErrorState = {		hasError: false,		error: undefined	}	// Update state when an error is thrown in a child component	static getDerivedStateFromError(error: Error): ErrorState {		return { hasError: true, error }	}	// Log error details - ideally should be an external service	componentDidCatch(error: Error, errorInfo: ErrorInfo) {		console.error('Uncaught error:', error, errorInfo)	}	// Render fallback UI if an error occurred, else render children	render() {		if (this.state.hasError) {			return (				<div style={{ padding: '16px', color: 'red' }}>					<h3 style={{ marginTop: 0, marginBottom: 8 }}>						Something went wrong.					</h3>					<span>{this.state.error?.message}</span>				</div>			)		}		// No error, render children as usual		return this.props.children	}}export default ErrorBoundary