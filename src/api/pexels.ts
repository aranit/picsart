import axios from 'axios'import { Photo, RawPexelsPhotoPreview } from '../types/photo'import { generateRandomPastDate } from '../helpers/functions'// Load the API key from environment variablesconst API_KEY = import.meta.env.VITE_PEXELS_API_KEYconst BASE_URL = 'https://api.pexels.com/v1'// Throw an error if the API key is missingif (!API_KEY) {	throw new Error('API_KEY is missing in environment variables')}// Create axios instance for Pexels APIconst pexels = axios.create({	baseURL: BASE_URL,	headers: {		Authorization: API_KEY	}})/** * Search for photos from the Pexels API. * @param query - The search string * @param itemsPerPage - Number of results per page * @param page - Number of page * @returns A promise that resolves to an array of RawPexelsPhotoPreview objects */export const searchPhotos = async (	query: string,	itemsPerPage = 30,	page = 1): Promise<RawPexelsPhotoPreview[]> => {	try {		const response = await pexels.get('/search', {			params: { query, per_page: itemsPerPage, page }		})		const data = response.data.photos		// Get only the fields that will be used		const enhancedPhotos: RawPexelsPhotoPreview[] = data.map(			(photo: any) => ({				id: photo.id,				alt: photo.alt,				src: {					medium: photo.src.medium				}			})		)		return enhancedPhotos	} catch (error) {		console.error('Could not fetch photos:', error)		throw error	}}/** * Fetches a single photo by its ID from the Pexels API. * @param id - The unique ID of the photo to retrieve. * @returns A promise that resolves to a RawPexelsPhoto object. */export const getPhotoById = async (id: number): Promise<Photo> => {	try {		const response = await pexels.get(`/photos/${id}`)		const data = response.data		// Get only the fields that will be used		return {			id: data.id,			alt: data.alt,			photographer: data.photographer,			src: {				medium: data.src.medium,				large: data.src.large			},			// Use the first 25 characters of the alt text as the title			title: data.alt?.slice(0, 25) + '.' || 'Untitled',			dateTaken: generateRandomPastDate()		}	} catch (error) {		console.error('Could not fetch photo:', error)		throw error	}}