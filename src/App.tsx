import { useState, useEffect, useCallback } from 'react'import { Routes, Route } from 'react-router-dom'import './App.css'import { searchPhotos } from './api/pexels'import { RawPexelsPhotoPreview } from './types/photo'import MasonryGrid from './components/MasonryGrid'import PhotoDetail from './components/PhotoDetail'function App() {	const [photos, setPhotos] = useState<RawPexelsPhotoPreview[]>([])	const [loading, setLoading] = useState<boolean>(false)	const [error, setError] = useState<string | null>(null)	const [page, setPage] = useState<number>(1)	// Fetch photos for a specific page	const fetchPhotos = useCallback(async (page: number) => {		// Set loading to true before making the API call		setLoading(true)		try {			// Fetch 'animal' photos from API			const response = await searchPhotos('animal', 30, page)			// Append newly fetched photos			setPhotos(prev => [...prev, ...response])		} catch (error) {			console.error(`Failed to fetch photos: ${error}`)			setError('Failed to load photos. Please try again.')		} finally {			// Disable loading after API call has finished			setLoading(false)		}	}, [])	// Get the initial load of photos once the component mounts	useEffect(() => {		fetchPhotos(1)	}, [fetchPhotos])	// Scroll event detects when we are approaching the bottom of the page	// and triggers another API call	useEffect(() => {		const handleScroll = () => {			// Check if the user is approaching the bottom of the page			const scrolledToBottom =				window.innerHeight + window.scrollY >=				document.body.offsetHeight - 300			// User is near the bottom and not already loading more photos			if (scrolledToBottom && !loading) {				setPage(prev => prev + 1)			}		}		window.addEventListener('scroll', handleScroll)		// Remove the event listener when component unmounts		return () => window.removeEventListener('scroll', handleScroll)	}, [loading])	// Fetch more photos when page changes	useEffect(() => {		if (page > 1) {			fetchPhotos(page)		}	}, [page, fetchPhotos])	// Show error if any	if (error) return <p>{error}</p>	return (		<div style={{ padding: '16px' }}>			<Routes>				<Route path="/" element={<MasonryGrid photos={photos} />} />				<Route path="/photo/:id" element={<PhotoDetail />} />			</Routes>			{loading && (				<p style={{ textAlign: 'center' }}>Loading more photos...</p>			)}		</div>	)}export default App